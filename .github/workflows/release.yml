name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine release version
        id: determine_version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          MAJOR=$(echo $LATEST_TAG | awk -F. '{print $1}')
          MINOR=$(echo $LATEST_TAG | awk -F. '{print $2}')
          PATCH=$(echo $LATEST_TAG | awk -F. '{print $3}')
          
          if [[ $PR_TITLE == *MINOR_RELEASE* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ $PR_TITLE == *MAJOR_RELEASE* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          VERSION="$MAJOR.$MINOR.$PATCH"
          echo "::set-output name=version::$VERSION"

      - name: Create or update version release
        id: create_version_release
        uses: elgohr/Github-Release-Action@v5
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ steps.determine_version.outputs.version }}
          title: Release ${{ steps.determine_version.outputs.version }}

      - name: Check if latest release exists
        id: check_latest_release
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/latest)
          if echo "$LATEST_RELEASE" | grep -q "Not Found"; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi

      - name: Create or update latest release
        if: steps.check_latest_release.outputs.exists == 'false'
        id: create_latest_release
        uses: elgohr/Github-Release-Action@v5
        with:
          tag: latest
          title: Latest Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release
        if: steps.check_latest_release.outputs.exists == 'true'
        run: |
          LATEST_RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .id)
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"tag_name": "latest", "name": "Latest Release", "draft": false, "prerelease": false}' \
            https://api.github.com/repos/${{ github.repository }}/releases/$LATEST_RELEASE_ID